
SHOW DATABASES;

CREATE DATABASE PRODUCT_DB;
CREATE DATABASE INVENTORY_DB;
CREATE DATABASE ORDER_DB;
CREATE DATABASE PAYMENT_DB;

SHOW TABLES;

USE PRODUCT_DB;
USE INVENTORY_DB;
USE ORDER_DB;
USE PAYMENT_DB;

CREATE TABLE Product (

    product_id INT PRIMARY KEY AUTO_INCREMENT,

    name VARCHAR(100) NOT NULL,

    description TEXT,

    price DECIMAL(10, 2) NOT NULL,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

);
 

 
CREATE TABLE Payment (

    payment_id INT PRIMARY KEY AUTO_INCREMENT,

    order_id INT NOT NULL,

    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    payment_method ENUM('CREDIT_CARD', 'DEBIT_CARD', 'PAYPAL', 'CASH', 'UPI'),

    payment_status ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED') DEFAULT 'PENDING',

    transaction_id VARCHAR(100) UNIQUE,

    amount DECIMAL(10, 2) NOT NULL,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

);
 

 
CREATE TABLE Inventory (

    inventory_id INT PRIMARY KEY AUTO_INCREMENT,

    product_id INT UNIQUE,

    stock_quantity INT NOT NULL,

    reserved_stock INT DEFAULT 0,

    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

);
 
 

 
CREATE TABLE `Order` (

    order_id INT PRIMARY KEY AUTO_INCREMENT,

    customer_id INT NOT NULL,

    order_status ENUM('PENDING', 'CONFIRMED', 'SHIPPED', 'CANCELLED', 'COMPLETED') DEFAULT 'PENDING',

    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    total_amount DECIMAL(10, 2) NOT NULL,

    is_paid BOOLEAN DEFAULT FALSE,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

);
 
 
CREATE TABLE OrderItem (

    order_item_id INT PRIMARY KEY AUTO_INCREMENT,

    order_id INT,

    product_id INT, -- Fetched from Product Service

    quantity INT NOT NULL,

    price DECIMAL(10, 2) NOT NULL,

    subtotal DECIMAL(10, 2) AS (quantity * price) STORED,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (order_id) REFERENCES `Order`(order_id) ON DELETE CASCADE

);
 

 